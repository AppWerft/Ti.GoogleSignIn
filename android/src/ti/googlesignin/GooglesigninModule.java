/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package ti.googlesignin;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiMessenger;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.util.TiActivityResultHandler;
import org.appcelerator.titanium.util.TiActivitySupport;

import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;

import com.google.android.gms.auth.api.Auth;
import com.google.android.gms.auth.api.signin.GoogleSignInAccount;
import com.google.android.gms.auth.api.signin.GoogleSignInOptions;
import com.google.android.gms.auth.api.signin.GoogleSignInResult;
import com.google.android.gms.auth.api.signin.GoogleSignInStatusCodes;

import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.common.api.GoogleApiClient.ConnectionCallbacks;
import com.google.android.gms.common.api.GoogleApiClient.OnConnectionFailedListener;
import com.google.android.gms.common.api.ResultCallback;
import com.google.android.gms.common.api.Status;

@Kroll.module(name = "Googlesignin", id = "ti.googlesignin")
public class GooglesigninModule extends KrollModule implements ConnectionCallbacks, OnConnectionFailedListener {
	GoogleApiClient googleApiClient;

	public static final String LCAT = "TiGoogleSignIn";
	private static int RC_SIGN_IN = 34;

	@Kroll.constant
    @SuppressWarnings("unused")
	public static final int SIGN_IN_REQUIRED = GoogleSignInStatusCodes.SIGN_IN_CANCELLED;

	@Kroll.constant
    @SuppressWarnings("unused")
	public static final int NETWORK_ERROR = GoogleSignInStatusCodes.SIGN_IN_FAILED;

	@Kroll.constant
    @SuppressWarnings("unused")
	public static final int INVALID_ACCOUNT = GoogleSignInStatusCodes.INVALID_ACCOUNT;

	@Kroll.constant
    @SuppressWarnings("unused")
	public static final int INTERNAL_ERROR = GoogleSignInStatusCodes.INTERNAL_ERROR;

	public GooglesigninModule() {
		super();
	}

	@Override
	public void onStart(Activity activity) {
		Log.d(LCAT, "[MODULE LIFECYCLE EVENT] start");
		if (googleApiClient != null)
			googleApiClient.connect();
		super.onStart(activity);
	}

	@Kroll.method
	protected synchronized void initialize(KrollDict opts) {
        String serverClientId;

        if (opts.containsKeyAndNotNull("clientID")) {
			serverClientId = opts.getString("clientID");
		} else {
			Log.e(LCAT, "No clientID found!");
			return;
		}

		GoogleSignInOptions gso = new GoogleSignInOptions.Builder(
				GoogleSignInOptions.DEFAULT_SIGN_IN)
				.requestIdToken(serverClientId).requestProfile().requestEmail()
				.build();

		googleApiClient = new GoogleApiClient.Builder(TiApplication.getInstance().getApplicationContext())
				.addApi(Auth.GOOGLE_SIGN_IN_API, gso)
				.addConnectionCallbacks(this)
				.addOnConnectionFailedListener(this).build();
		googleApiClient.connect();
	}

	@Kroll.getProperty
	protected boolean getLoggedIn() {
		return googleApiClient.isConnected();
	}

	@Kroll.method
	protected synchronized void signIn() {
		Log.d(LCAT, "signIn with " + googleApiClient.toString());
		// Building of intent
		final Intent signInIntent = Auth.GoogleSignInApi
				.getSignInIntent(googleApiClient);
		// building new activity with result handler
		final TiActivitySupport activitySupport = (TiActivitySupport) TiApplication
				.getInstance().getCurrentActivity();
		if (TiApplication.isUIThread()) {
			activitySupport.launchActivityForResult(signInIntent, RC_SIGN_IN,
					new SignInResultHandler());
		} else {
			TiMessenger.postOnMain(new Runnable() {
				@Override
				public void run() {
					activitySupport.launchActivityForResult(signInIntent,
							RC_SIGN_IN, new SignInResultHandler());
				}
			});
		}
	}

	@Kroll.method
	protected synchronized void signOut() {
		if (googleApiClient != null) {
			if (googleApiClient.isConnected()) {
				Auth.GoogleSignInApi.signOut(googleApiClient)
						.setResultCallback(new ResultCallback<Status>() {
							@Override
							public void onResult(Status status) {
								KrollDict kd = new KrollDict();
								kd.put("status", status.getStatusMessage());

								fireEvent("disconnect", kd);
							}
						});
			} else {
				Log.w(LCAT, "googleApiClient not connected yet");
			}
		} else {
			Log.e(LCAT, "googleApiClient doesnt exist");
		}
	}

	private final class SignInResultHandler implements TiActivityResultHandler {
		public void onError(Activity arg0, int arg1, Exception e) {
		    Log.e(LCAT, e.getMessage());
		}

		public void onResult(Activity dummy, int requestCode, int resultCode, Intent data) {
			Log.d(LCAT, "onResult: " + requestCode);
			if (requestCode == RC_SIGN_IN) {
			    Log.d(LCAT, "processing sign-in with resultCode: " + resultCode);
				GoogleSignInResult result = Auth.GoogleSignInApi.getSignInResultFromIntent(data);

                KrollDict event = new KrollDict();
                KrollDict user = new KrollDict();
                KrollDict profile = new KrollDict();
                KrollDict auth = new KrollDict();

				if (result.isSuccess()) {
                    Log.d(LCAT, "Login Success");

                    GoogleSignInAccount googleSignInAccount = result.getSignInAccount();

					profile.put("familyName", googleSignInAccount.getFamilyName());
                    profile.put("givenName", googleSignInAccount.getGivenName());
                    profile.put("accountName", googleSignInAccount.getAccount().name);
                    profile.put("name", googleSignInAccount.getDisplayName());
                    profile.put("displayName", googleSignInAccount.getDisplayName());
                    profile.put("email", googleSignInAccount.getEmail());
                    profile.put("image", googleSignInAccount.getPhotoUrl().toString());
					profile.put("accountType", googleSignInAccount.getAccount().type);
					profile.put("accountString", googleSignInAccount.getAccount().toString());

                    auth.put("idToken", googleSignInAccount.getIdToken());

                    user.put("id", googleSignInAccount.getId());
                    user.put("scopes", googleSignInAccount.getGrantedScopes().toArray());
                    user.put("serverAuthCode", googleSignInAccount.getServerAuthCode());
					user.put("profile", profile);
                    user.put("authentication", auth);

					event.put("user", user);
					event.put("success", true);

					fireEvent("login", event);
				} else {
					event.put("code", result.getStatus().getStatusCode());
					event.put("message", result.getStatus().getStatusMessage());
					event.put("success", false);

					fireEvent("error", event);
				}
			}
		}
	}

	@Override
	public void onConnectionFailed(ConnectionResult result) {
		Log.d(LCAT, "onConnectionFailed");
		if (hasListeners("error")) {
			KrollDict kd = new KrollDict();
			kd.put("error", result.getErrorMessage());
			kd.put("code", result.getErrorCode());

			fireEvent("error", kd);
		}
	}

	/*
	 * After calling connect(), this method will be invoked asynchronously when
	 * the connect request has successfully completed. After this callback, the
	 * application can make requests on other methods provided by the client and
	 * expect that no user intervention is required to call methods that use
	 * account and scopes provided to the client constructor.
	 * 
	 * Note that the contents of the connectionHint Bundle are defined by the
	 * specific services. Please see the documentation of the specific
	 * implementation of GoogleApiClient you are using for more information.
	 */
	@Override
	public void onConnected(Bundle bundle) {
		Log.d(LCAT, "onConnected");

		KrollDict kd = new KrollDict();

		// This may be set if play-services provide it. If not available, it's fine as well
		if (bundle != null) {
			kd.put("result", bundle.toString());
		}

	    fireEvent("connect", kd);
	}

	/*
	 * Called when the client is temporarily in a disconnected state. This can
	 * happen if there is a problem with the remote service (e.g. a crash or
	 * resource problem causes it to be killed by the system). When called, all
	 * requests have been canceled and no outstanding listeners will be
	 * executed. GoogleApiClient will automatically attempt to restore the
	 * connection. Applications should disable UI components that require the
	 * service, and wait for a call to onConnected(Bundle) to re-enable
	 */
	@Override
	public void onConnectionSuspended(int result) {
		KrollDict kd = new KrollDict();
		Log.d(LCAT, "onConnectionSuspended");
	}
}

